################################################################################
#	Main simulation file#
#	Author:	Timothee Poisot#
#			timothee.poisot@univ-montp2.fr#
################################################################################
#
library(deSolve)#
source('functions.R')#
#
opti.1 	<- 0			# Optimal environnemental dans le patch 1#
opti.2 	<- 0			# Optimal environnemental dans le patch 2#
#
h.traits.1 <- 0#
p.traits.1 <- 0#
#
h.eff.1 <- 1e4#
p.eff.1 <- 1e5#
#
path.ext <- 0.7#
host.ext <- 0.7#
#
df <- NULL#
df <- matrix(0,ncol=4,nrow=1)#
#
xip <- 0.1#
#
df[1,] <- c(0,as.numeric(h.eff.1),0,'H')#
colnames(df) <- c('time','pop','trait','type')#
df <- rbind(df,c(0,as.numeric(p.eff.1),0,'P'))#
#
perm.parms <- c(#
		'r' = 0.1,#
		'K' = 1e7,#
		'alpha' = 0.05,#
		'phi' = 8e-8,#
		'opti' = opti.1,#
		'nh' = length(h.eff.1),#
		'beta' = 20#
		)#
#
population <- c(h.eff.1,p.eff.1)#
#
evalstep <- .1#
#
ltrans <- 1#
ntrans <- 400#
#
fpert <- 1#
#
perts <- seq(from=fpert,to=(ntrans-1),by=fpert)*ltrans#
#
trans <- seq(from=0,to=ltrans*ntrans,by=ltrans)#
#
temp.pop <- NULL#
#
mats <- NULL#
#
for(i in 2:length(trans))#
{#
	percent <- round(i/length(trans)*100,2)#
	percent <- paste(percent,' %',sep='')#
	print(percent)#
	evalsteps <- seq(trans[(i-1)]+evalstep,to=trans[i],by=evalstep)#
	if(sum(evalsteps%in%perts))#
	{#
		perm.parms['opti'] <- ifelse(perm.parms['opti']==opti.1,opti.2,opti.1)#
	}#
	parms <- c(h.traits.1,p.traits.1,perm.parms)#
	out <- lsoda(population,evalsteps,popdyn,parms,verbose=FALSE)#
    dtp <- dim(out)#
	p.population <- as.numeric(out[(dtp[1]-1),(2:dtp[2])])	# Previous population#
	population <- as.numeric(out[dtp[1],(2:dtp[2])])#
	df <- add.to.df(df,populations=out,perm.parms['nh'],(dtp[2]-perm.parms['nh']-1),h.traits.1,p.traits.1)#
	## Mutation#
	## Renvoie POPS, TRAITS H, TRAITS P, VECTEUR [NH NP]#
	ns <- mutate(population,p.population,perm.parms['nh'],(dtp[2]-perm.parms['nh']-1),h.traits.1,p.traits.1)#
	population <- ns[[1]]#
	nh <- ns[[4]][1]#
	np <- ns[[4]][2]#
	HP <- population[1:nh]#
    PP <- population[(nh+1):(np+nh)]#
	PtoK <- PP > path.ext#
	HtoK <- HP > host.ext#
	PP <- PP[PtoK]#
	HP <- HP[HtoK]#
	h.traits.1 <- ns[[2]][HtoK]#
	p.traits.1 <- ns[[3]][PtoK]#
	nh <- length(HP)#
	population <- c(HP,PP)#
	perm.parms['nh'] <- nh#
	mats[[length(mats)+1]] <- getphi(h.traits.1,p.traits.1,xi=xip)#
}#
#
boxplot(lapply(mats,getspe))#
stripchart(c(1:length(mats)),lapply(mats,getspe)[[c(1:length(mats))]],method='jitter',col='darkgreen',vertical=TRUE)#
#
to.int = function(mat) round(mat,4)*1e4
setwd('/Users/Tim/Programmation/[ThÃ¨se]WeitzFramework')
################################################################################
#	Main simulation file#
#	Author:	Timothee Poisot#
#			timothee.poisot@univ-montp2.fr#
################################################################################
#
library(deSolve)#
library(log10)#
library(ESM)#
source('functions.R')#
#
opti.1 	<- 0			# Optimal environnemental dans le patch 1#
opti.2 	<- 0			# Optimal environnemental dans le patch 2#
#
h.traits.1 <- 0#
p.traits.1 <- 0#
#
h.eff.1 <- 1e4#
p.eff.1 <- 1e5#
#
path.ext <- 0.7#
host.ext <- 0.7#
#
df <- NULL#
df <- matrix(0,ncol=4,nrow=1)#
#
xip <- 0.1#
#
df[1,] <- c(0,as.numeric(h.eff.1),0,'H')#
colnames(df) <- c('time','pop','trait','type')#
df <- rbind(df,c(0,as.numeric(p.eff.1),0,'P'))#
#
perm.parms <- c(#
		'r' = 0.1,#
		'K' = 1e7,#
		'alpha' = 0.05,#
		'phi' = 8e-8,#
		'opti' = opti.1,#
		'nh' = length(h.eff.1),#
		'beta' = 20#
		)#
#
population <- c(h.eff.1,p.eff.1)#
#
evalstep <- .1#
#
ltrans <- 1#
ntrans <- 400#
#
fpert <- 1#
#
perts <- seq(from=fpert,to=(ntrans-1),by=fpert)*ltrans#
#
trans <- seq(from=0,to=ltrans*ntrans,by=ltrans)#
#
temp.pop <- NULL#
#
mats <- NULL#
#
for(i in 2:length(trans))#
{#
	percent <- round(i/length(trans)*100,2)#
	percent <- paste(percent,' %',sep='')#
	print(percent)#
	evalsteps <- seq(trans[(i-1)]+evalstep,to=trans[i],by=evalstep)#
	if(sum(evalsteps%in%perts))#
	{#
		perm.parms['opti'] <- ifelse(perm.parms['opti']==opti.1,opti.2,opti.1)#
	}#
	parms <- c(h.traits.1,p.traits.1,perm.parms)#
	out <- lsoda(population,evalsteps,popdyn,parms,verbose=FALSE)#
    dtp <- dim(out)#
	p.population <- as.numeric(out[(dtp[1]-1),(2:dtp[2])])	# Previous population#
	population <- as.numeric(out[dtp[1],(2:dtp[2])])#
	df <- add.to.df(df,populations=out,perm.parms['nh'],(dtp[2]-perm.parms['nh']-1),h.traits.1,p.traits.1)#
	## Mutation#
	## Renvoie POPS, TRAITS H, TRAITS P, VECTEUR [NH NP]#
	ns <- mutate(population,p.population,perm.parms['nh'],(dtp[2]-perm.parms['nh']-1),h.traits.1,p.traits.1)#
	population <- ns[[1]]#
	nh <- ns[[4]][1]#
	np <- ns[[4]][2]#
	HP <- population[1:nh]#
    PP <- population[(nh+1):(np+nh)]#
	PtoK <- PP > path.ext#
	HtoK <- HP > host.ext#
	PP <- PP[PtoK]#
	HP <- HP[HtoK]#
	h.traits.1 <- ns[[2]][HtoK]#
	p.traits.1 <- ns[[3]][PtoK]#
	nh <- length(HP)#
	population <- c(HP,PP)#
	perm.parms['nh'] <- nh#
	mats[[length(mats)+1]] <- getphi(h.traits.1,p.traits.1,xi=xip)#
}#
#
boxplot(lapply(mats,getspe))#
stripchart(c(1:length(mats)),lapply(mats,getspe)[[c(1:length(mats))]],method='jitter',col='darkgreen',vertical=TRUE)#
#
to.int = function(mat) round(mat,4)*1e4
abp
abp = function(data,loc=list(c('darkblue','skyblue')),names=NULL,ylim=NULL,gcol='grey',bg='white',groups=c(1:length(data)),al=0.05,ylab='',xlab='',...,log='y',add.pt=TRUE,pt.c='black',pt.p='.')#
{#
	##
	if (is.null(ylim)) {#
	        ylim = range(data)#
	    }#
	if(log=='y')#
	{#
		ylim = log(ylim,10)#
	}#
	## Set BARSPACER#
	BSP <- 0.4#
	## Group position calculation#
	xf <- 0#
	xf[2] <- BSP*1.5#
	for(i in 2:length(groups))#
	{#
		if(groups[i]==groups[(i-1)])#
		{#
			xf[(i+1)] <- xf[i]+BSP#
		} else {#
			xf[(i+1)] <- xf[i]+BSP*2#
		}#
	}#
	xf[length(xf)+1] <- xf[length(xf)]+BSP*1.5#
	## End group#
	xlim=range(xf)#
	plot(0,pch=NA,xlim=xlim,ylim=ylim,yaxt='s',bty='o',yaxt='n',xaxt='n',xaxs='i',bty='n',xlab=xlab,ylab=ylab,...)#
	rect(par('usr')[1],par('usr')[3],par('usr')[2],par('usr')[4],density=NA,col=bg)#
	abline(h=pretty(ylim),col=gcol,lty=3)#
	for(i in 1:length(data))#
	{#
		data[[i]] <- data[[i]][!is.na(data[[i]])]#
		if(log=='y'){data[[i]] <- log(data[[i]],10)}#
		cd <- boxplot.stats(data[[i]])#
		intcol <- ifelse(length(loc)==length(data),loc[[i]][2],loc[[1]][2])#
		outcol <- ifelse(length(loc)==length(data),loc[[i]][1],loc[[1]][1])#
		arrows(xf[(i+1)],cd$stats[1],xf[(i+1)],cd$stats[5],lwd=1.2,col=outcol,code=3,angle=90,length=al)#
		rect(xf[(i+1)]-BSP/3.5,cd$stats[2],xf[(i+1)]+BSP/3.5,cd$stats[4],density=NA,col=intcol,border=outcol)#
		points(xf[(i+1)],cd$stats[3],pch=20,col=outcol)#
		if(length(cd$out)>0)#
		{#
			points(rep(xf[(i+1)],length(cd$out)),cd$out,pch=20,col=outcol)#
		}#
		if(add.pt)#
		{#
			xs <- jitter(c(1:length(data[[i]])))#
			points(xs,data[[i]],pch=pt.p,col=pt.c)#
		}#
	}#
	if(is.null(names))#
	{#
		labs <- names(data)#
	} else {#
		labs <- names#
	}#
	if(log=='y')#
	{#
		logaxis(2,range(data))#
	} else {#
		axis(2,at=pretty(range(data)))#
	}#
	axis(1,at=xf[2:(length(xf)-1)],labels=labs,col.ticks='transparent',lwd=0,cex.axis=0.8)#
	box()#
}
abp(lapply(mats,getspe))
abp(lapply(mats,getspe),log='')
abp(lapply(mats,getspe),log='',names=c(1:lenght(mats)))
abp = function(data,loc=list(c('darkblue','skyblue')),names=NULL,ylim=NULL,gcol='grey',bg='white',groups=c(1:length(data)),al=0.05,ylab='',xlab='',...,log='y',add.pt=TRUE,pt.c='black',pt.p='.')#
{#
	##
	if (is.null(ylim)) {#
	        ylim = range(data)#
	    }#
	if(log=='y')#
	{#
		ylim = log(ylim,10)#
	}#
	## Set BARSPACER#
	BSP <- 0.4#
	## Group position calculation#
	xf <- 0#
	xf[2] <- BSP*1.5#
	for(i in 2:length(groups))#
	{#
		if(groups[i]==groups[(i-1)])#
		{#
			xf[(i+1)] <- xf[i]+BSP#
		} else {#
			xf[(i+1)] <- xf[i]+BSP*2#
		}#
	}#
	xf[length(xf)+1] <- xf[length(xf)]+BSP*1.5#
	## End group#
	xlim=range(xf)#
	plot(0,pch=NA,xlim=xlim,ylim=ylim,yaxt='s',bty='o',yaxt='n',xaxt='n',xaxs='i',bty='n',xlab=xlab,ylab=ylab,...)#
	rect(par('usr')[1],par('usr')[3],par('usr')[2],par('usr')[4],density=NA,col=bg)#
	abline(h=pretty(ylim),col=gcol,lty=3)#
	for(i in 1:length(data))#
	{#
		data[[i]] <- data[[i]][!is.na(data[[i]])]#
		if(log=='y'){data[[i]] <- log(data[[i]],10)}#
		cd <- boxplot.stats(data[[i]])#
		intcol <- ifelse(length(loc)==length(data),loc[[i]][2],loc[[1]][2])#
		outcol <- ifelse(length(loc)==length(data),loc[[i]][1],loc[[1]][1])#
		arrows(xf[(i+1)],cd$stats[1],xf[(i+1)],cd$stats[5],lwd=1.2,col=outcol,code=3,angle=90,length=al)#
		rect(xf[(i+1)]-BSP/3.5,cd$stats[2],xf[(i+1)]+BSP/3.5,cd$stats[4],density=NA,col=intcol,border=outcol)#
		points(xf[(i+1)],cd$stats[3],pch=20,col=outcol)#
		if(length(cd$out)>0)#
		{#
			points(rep(xf[(i+1)],length(cd$out)),cd$out,pch=20,col=outcol)#
		}#
		if(add.pt)#
		{#
			xs <- jitter(rep(xf[(i+1)],length(data[[i]])))#
			points(xs,data[[i]],pch=pt.p,col=pt.c)#
		}#
	}#
	if(is.null(names))#
	{#
		labs <- names(data)#
	} else {#
		labs <- names#
	}#
	if(log=='y')#
	{#
		logaxis(2,range(data))#
	} else {#
		axis(2,at=pretty(range(data)))#
	}#
	axis(1,at=xf[2:(length(xf)-1)],labels=labs,col.ticks='transparent',lwd=0,cex.axis=0.8)#
	box()#
}
abp(lapply(mats,getspe),log='',names=c(1:length(mats)))
abp(lapply(mats,getspe),log='',names=c(1:length(mats)),pt.p=21)
abp(lapply(mats,getspe),log='',names=c(1:length(mats)),pt.p=20)
abp = function(data,loc=list(c('darkblue','skyblue')),names=NULL,ylim=NULL,gcol='grey',bg='white',groups=c(1:length(data)),al=0.05,ylab='',xlab='',...,log='y',add.pt=TRUE,pt.c='black',pt.p='.')#
{#
	##
	if (is.null(ylim)) {#
	        ylim = range(data)#
	    }#
	if(log=='y')#
	{#
		ylim = log(ylim,10)#
	}#
	## Set BARSPACER#
	BSP <- 0.4#
	## Group position calculation#
	xf <- 0#
	xf[2] <- BSP*1.5#
	for(i in 2:length(groups))#
	{#
		if(groups[i]==groups[(i-1)])#
		{#
			xf[(i+1)] <- xf[i]+BSP#
		} else {#
			xf[(i+1)] <- xf[i]+BSP*2#
		}#
	}#
	xf[length(xf)+1] <- xf[length(xf)]+BSP*1.5#
	## End group#
	xlim=range(xf)#
	plot(0,pch=NA,xlim=xlim,ylim=ylim,yaxt='s',bty='o',yaxt='n',xaxt='n',xaxs='i',bty='n',xlab=xlab,ylab=ylab,...)#
	rect(par('usr')[1],par('usr')[3],par('usr')[2],par('usr')[4],density=NA,col=bg)#
	abline(h=pretty(ylim),col=gcol,lty=3)#
	for(i in 1:length(data))#
	{#
		data[[i]] <- data[[i]][!is.na(data[[i]])]#
		if(log=='y'){data[[i]] <- log(data[[i]],10)}#
		cd <- boxplot.stats(data[[i]])#
		intcol <- ifelse(length(loc)==length(data),loc[[i]][2],loc[[1]][2])#
		outcol <- ifelse(length(loc)==length(data),loc[[i]][1],loc[[1]][1])#
		arrows(xf[(i+1)],cd$stats[1],xf[(i+1)],cd$stats[5],lwd=1.2,col=outcol,code=3,angle=90,length=al)#
		rect(xf[(i+1)]-BSP/3.5,cd$stats[2],xf[(i+1)]+BSP/3.5,cd$stats[4],density=NA,col=intcol,border=outcol)#
		points(xf[(i+1)],cd$stats[3],pch=20,col=outcol)#
		if(length(cd$out)>0)#
		{#
			points(rep(xf[(i+1)],length(cd$out)),cd$out,pch=20,col=outcol)#
		}#
		if(add.pt)#
		{#
			xs <- jitter(rep(xf[(i+1)],length(data[[i]])),factor=0.7)#
			points(xs,data[[i]],pch=pt.p,col=pt.c)#
		}#
	}#
	if(is.null(names))#
	{#
		labs <- names(data)#
	} else {#
		labs <- names#
	}#
	if(log=='y')#
	{#
		logaxis(2,range(data))#
	} else {#
		axis(2,at=pretty(range(data)))#
	}#
	axis(1,at=xf[2:(length(xf)-1)],labels=labs,col.ticks='transparent',lwd=0,cex.axis=0.8)#
	box()#
}
abp(lapply(mats,getspe),log='',names=c(1:length(mats)),pt.p=20,pt.c='red')
logaxis <- function(side,range)#
{#
	par(tck=0.02,las=1)#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=0.02/3)#
	axis(side,at=ats,labels=NA)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=0.02,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
}
logplot(10^seq(-2,3,10))
logplot(10^seq(-2,3,length=10))
logplot(10^seq(-2,3,length=10),log='y')
logaxis <- function(side,range)#
{#
	par(tck=0.02,las=1)#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=0.02/3)#
	axis(side,at=ats,labels=NA)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
#	par(tck=0.02,xaxs=xint,yaxs=yint)#
	par(xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
}
logaxis <- function(side,range,tck,las)#
{#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=0.02/3)#
	axis(side,at=ats,labels=NA)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
}
logplot(10^seq(-2,3,length=10),log='y');loggrid()
logplot(10^seq(-2,3,length=10),log='y',tck=-0.1);loggrid()
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	axis(side,at=ats,labels=NA)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
}
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	axis(side,at=ats,labels=NA)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
	box()#
}
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<5)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
	box()#
}
logplot(10^seq(-2,3,length=10),log='y',tck=-0.01);loggrid()
logplot(10^seq(-2,3,length=10),log='y',tck=-0.01,xint='i');loggrid()
logplot(10^seq(-2,3,length=10),log='y',tck=-0.01,xint='i',yint='i');loggrid()
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<=6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
	print(ats)#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
	box()#
}
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<=6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
	box()#
}
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(x=TRUE,y=TRUE,...){#
	grid()#
	box()#
}
logplot(10^seq(-2,3,length=10),log='y',tck=-0.02,xint='i',yint='i');loggrid()
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}#
#
loggrid <- function(...){#
	grid(...)#
	box()#
}
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i');loggrid()
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i');loggrid(col='red')
loggrid <- function(...){#
	grid(...)#
}#
#
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=0.02,las=1,grid=TRUE,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	if(grid)#
	{#
		loggrid()#
	}#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i')
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i',pch=21)
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i',pch=21,bg:'blue')
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i',pch=21,bg='blue')
logplot(10^seq(-2,5,length=10),log='y',tck=-0.02,xint='i',yint='i',pch=21,bg='pink')
setwd('/Users/Tim/scian/pkg/log10/R')
loggrid <- function(...){#
	grid(...)#
}#
#
logaxis <- function(side,range)#
{#
	ctck <- par('tck')#
	d <- range#
	mlog <- floor(min(d))#
	Mlog <- ceiling(max(d))#
	SeqLog <- c(mlog:Mlog)#
	Nlog <- (Mlog-mlog)+1#
	for(i in SeqLog)#
	{#
		if(i==0)#
		{#
			axis(side,at=i,labels=substitute(1^phantom(0)))#
		}#
		else{#
			axis(side,at=i,labels=substitute(10^i))#
		}#
	}#
	ats <- log(seq(from=2,to=9,by=1),10)#
	mod <- NULL#
	for(i in SeqLog)#
	{#
		mod <- c(mod,rep(i,length(ats)))#
	}#
	ats <- rep(ats,Nlog)#
	ats <- ats+mod#
	par(tck=ctck/3)#
	if(diff(range(SeqLog))<6)#
	{#
		axis(side,at=ats,labels=NA)#
	}#
}#
#
logplot <- function(x,y,log='xy',yint='r',xint='r',xlim=NULL,ylim=NULL,tck=-0.015,las=1,grid=TRUE,...)#
{#
	GLL <<- log#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	if(is.null(xlim)){xlim=range(x)}#
	if(is.null(ylim)){ylim=range(y)}#
	par(tck=tck,las=las,xaxs=xint,yaxs=yint)#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	if(xlg){xlim=log(xlim,10)}else{xlim=xlim}#
	if(ylg){ylim=log(ylim,10)}else{ylim=ylim}#
	plot.default(x,y,axes=FALSE,ylim=ylim,xlim=xlim,...)#
	rect(par()$usr[1],par()$usr[3],par()$usr[2],par()$usr[4],density=NA,col='white')#
	if(grid)#
	{#
		loggrid()#
	}#
	points(x,y,...)#
	if(xlg){logaxis(1,xlim)}else{axis(1,at=pretty(xlim),labels=pretty(xlim))}#
	if(ylg){logaxis(2,ylim)}else{axis(2,at=pretty(ylim),labels=pretty(ylim))}#
	box()#
}#
#
addlog <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(missing(y))#
	{#
		y <- x#
		x <- c(1:length(x))#
	}#
	xlg <- FALSE#
	ylg <- FALSE#
	if('x'%in%strsplit(GLL,'')[[1]]){x <- log(x,10);xlg=TRUE}#
	if('y'%in%strsplit(GLL,'')[[1]]){y <- log(y,10);ylg=TRUE}#
	points(x,y,...)#
	#
}#
#
logfill <- function(z,pal=hcp3,f.nbins=100,c.nbins=10,log='xy',c.col='black',int=c('i','i'),labcex=0.8,...)#
{#
	if(is.null(colnames(z))){colnames(z)<-c(1:ncol(z))}#
	if(is.null(rownames(z))){rownames(z)<-c(1:nrow(z))}#
	x <- as.numeric(rownames(z))#
	y <- as.numeric(colnames(z))#
	xl <- range(x)#
	yl <- range(y)#
	if('x'%in%strsplit(log,'')[[1]]){x <- log(x,10)}#
	if('y'%in%strsplit(log,'')[[1]]){y <- log(y,10)}#
	logplot(range(x),range(y),log=log,pch=NA,xint=int[1],yint=int[2],xlim=xl,ylim=yl,...)#
	levels <- pretty(range(z),f.nbins)#
	col <- pal(length(levels)-1)#
	.Internal(filledcontour(#
		as.double(x),#
		as.double(y),#
		z,#
		as.double(levels),#
		col = col)#
		)#
	if('x'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(1,log(xl,10))#
	}#
	if('y'%in%strsplit(log,'')[[1]])#
	{#
		logaxis(2,log(yl,10))#
	}#
	if(c.nbins>0){contour(x,y,z,add=TRUE,col=c.col,n.levels=c.nbins,labcex=labcex)}#
	box()#
}#
#
loglm <- function(mod,range=NULL,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if(is.null(range)){#
		predictors <- eval(attr(terms(mod),'variables'))[[1]]#
		ampli <- diff(range(predictors))#
		range <- c((min(predictors)-0.2*ampli),(max(predictors)+0.2*ampli))#
	}#
	cdir <- mod$coeff[2]#
	orao <- mod$coeff[1]#
	x <- seq(from=range[1],to=range[2],length.out=1e3)#
	y <- x * cdir + orao#
	addlog(x,y,type='l',log=GLL,...)#
}#
#
#
hcp1 <- colorRampPalette(c(rgb(122,255,109,maxColorValue=255),rgb(189,255,93,maxColorValue=255),rgb(252,255,83,maxColorValue=255),rgb(255,139,29,maxColorValue=255),rgb(255,69,15,maxColorValue=255)))#
hcp2 <- colorRampPalette(c("black","darkblue","blue","green","orange",'yellow',"red","darkred"))#
hcp3 <- colorRampPalette(c(rgb(0,0,255,max='255'),rgb(15,251,240,max='255'),rgb(247,251,9,max='255'),rgb(246,150,9,max='255'),rgb(247,4,1,max='255'),rgb(128,4,0,max='255')))#
hcp4 <- colorRampPalette(c("blue", "green", "orange", "magenta", "cyan", "red", "yellow", "gray"))#
hcp5 <- colorRampPalette(c("white", "lightgrey", "black"))#
hcp6 <- colorRampPalette(c('white','skyblue','darkblue'))#
hcp7 <- colorRampPalette(c('darkblue','blue','turquoise','green','yellow','orange','red','darkred'))#
hcp8 <- colorRampPalette(c('black',rgb(0.1,0.1,0.1),'darkorange','white'))#
#
scale = function(v,m=0,M=1)#
{#
	v <- v-min(v)#
	v <- v/max(v)#
	v <- v*(M-m)#
	v <- v+m#
	return(v)#
}#
#
colgrid = function(mat,palette,cols=c('white','skyblue','darkblue'),gRes=1000,log='y')#
{#
	if(log=='y')#
	{#
		ym <- min(floor(log(mat,10)))#
		yM <- max(ceiling(log(mat,10)))#
		mat <- log(mat,10)#
	}#
	m.range <- range(mat)#
	pal <- colorRampPalette(c(cols))(gRes)#
	plot(0,xlim=c(-2,ncol(mat)+3),ylim=c(-2.5,nrow(mat)+1),xlab='',ylab='',xaxt='n',yaxt='n',bty='n',pch=NA)#
	mat <- round(scale(mat,1,gRes),0)#
	for(ro in 1:nrow(mat))#
	{#
		for(co in 1:ncol(mat))#
		{#
			rect(ro-0.5, co-0.5, ro+0.5, co+0.5, density=NA, col=pal[mat[ro,co]])#
		}#
	}#
	coo.x <- c(1:(ncol(mat)+1))#
	coo.y <- c(1:(nrow(mat)+1))#
	#
	text(c(1:ncol(mat)),0,colnames(mat),srt=90,adj=1)#
	text(0,c(1:nrow(mat)),rev(rownames(mat)),adj=1)#
	#
	segments(coo.x-0.5,0.5,coo.x-0.5,nrow(mat)+0.5,lwd=1.2)#
	segments(0.5,coo.y-0.5,ncol(mat)+0.5,coo.y-0.5,lwd=1.2)#
	#
	x1 <- ncol(mat)+1.5#
	x2 <- ncol(mat)+2#
	y1 <- 0.5#
	y2 <- nrow(mat)+0.5#
	#
	ys <- seq(from=y1,to=y2,length=gRes)#
	#
	for(i in 1:(gRes-1))#
	{#
		rect(x1,ys[i],x2,ys[i+1],density=NA,col=pal[i])#
	}#
	#
	rect(x1,y1,x2,y2,lwd=1.2)#
	#
	if(log=='y')#
	{#
		SeqLog <- c(ym:yM)#
		print(SeqLog)#
		Pos <- scale(SeqLog,0,ncol(mat))#
		for (i in 1:length(SeqLog)){#
			cp <- SeqLog[i]#
			segments(x1,Pos[i]+0.5,x2,Pos[i]+0.5,lwd=1.1,lty=3)#
			if (cp == 0) {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(1^phantom(0)))#
			} else {#
				text(ncol(mat)+2.5,Pos[i]+0.5,substitute(10^cp))#
			}#
		}#
	} else {#
		PRETTY <- pretty(range(c(1:ncol(mat))))#
		text(ncol(mat)+2.15,PRETTY+0.5,round(scale(PRETTY,m.range[1],m.range[2]),2),adj=0)#
		segments(x1,PRETTY+0.5,x2,PRETTY+0.5,lwd=1.1,lty=3)#
	}#
}#
#
logpoly <- function(x,y,...)#
{#
	if(!exists('GLL')){GLL<-''}#
	if('x'%in%GLL){x<-log(x,10)}#
	if('y'%in%GLL){y<-log(y,10)}#
	polygon(x,y,...)#
}
logplot(10^seq(-2,5,length=10),log='y',pch=21,bg='pink')
